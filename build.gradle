import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

plugins {
    id "com.github.spotbugs" version "4.6.0"
    id 'jacoco'
}

repositories {
    jcenter()
}

def isJacocoReportTarget(project) {
    def excludes = ['utilities'] // this project does not have any tests
    if (excludes.contains(project.name)) {
        return false
    }
    if (project == project.rootProject) {
        return false
    }
    if (!project.plugins.hasPlugin('jacoco')) {
        return false
    }
    return true
}

task jacocoMerge(type: JacocoMerge) {
    gradle.afterProject { project, state ->
        if (!isJacocoReportTarget(project)) {
            return
        }
        executionData project.tasks.test.jacoco.destinationFile
        dependsOn project.tasks.test
    }
}

task jacocoMergedReport(type: JacocoReport, dependsOn: [jacocoMerge]) {
    executionData jacocoMerge.destinationFile
    gradle.afterProject { project, state ->
        if (!isJacocoReportTarget(project)) {
            return
        }
        sourceDirectories.from(files([project.sourceSets.main.allJava.srcDirs]))
        classDirectories.from(project.sourceSets.main.output)
    }
    reports {
        xml.enabled = true
        csv.enabled = true
    }
    doLast {
        def xml = reports.xml.destination
        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        def xmlReport = parser.parse(xml)
        def targetTypes = ['INSTRUCTION', 'BRANCH']
        def toObj = {
            def type = it.@type
            def covered = it.@covered
            def missed = it.@missed
            def total = (covered as int) + (missed as int)
            def percentage = ((covered as float) / (total as float) * 100)
            return [
                    'type'      : type,
                    'covered'   : covered as int,
                    'missed'    : missed as int,
                    'total'     : total as int,
                    'percentage': percentage
            ]
        }
        def toRow = { current, prev ->
            def type = current.type
            def toMissedCol = {
                (it.missed as String) + "/" + (it.total as String)
            }
            def toPercentageCol = {
                String.format("%.2f", it.percentage)
            }
            def notChanged = ""
            if (prev == current) {
                notChanged = "(not changed)"
            }
            if (prev == null || prev == current) {
                return "|" + type.toLowerCase() + notChanged +
                        "|" + toMissedCol(current) +
                        "|" + toPercentageCol(current) + "%|"
            } else {
                return "|" + type.toLowerCase() +
                        "|~~" + toMissedCol(prev) + "~~ " + toMissedCol(current) +
                        "|~~" + toPercentageCol(prev) + "~~ " + toPercentageCol(current) + "%|"
            }
        }
        def summaryJson = file(xml.parent + "/jacoco_summary.json")
        def prevSummaryJson
        if (summaryJson.exists()) {
            prevSummaryJson = new JsonSlurper().parseText(summaryJson.text)
        }
        def summaryMd = file(xml.parent + "/jacoco_summary.md")
        if (summaryMd.exists()) {
            summaryMd.delete()
        }
        summaryMd << "|Type|Missed/Total|Coverage(%)|\n"
        summaryMd << "|:---|---:|:---|\n"
        def json = [:]
        xmlReport.counter
                .stream()
                .filter {
                    targetTypes.contains(it.@type)
                }
                .forEach {
                    def obj = toObj(it)
                    summaryMd << toRow(obj, prevSummaryJson?."${obj.type}") + "\n"
                    json[obj.type] = obj
                }

        summaryJson.write new JsonBuilder(json).toPrettyString()
    }
}

jacocoMerge.finalizedBy jacocoMergedReport
