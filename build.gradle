plugins {
    id "com.github.spotbugs" version "4.6.0"
    id 'jacoco'
}

repositories {
    jcenter()
}

def isJacocoReportTarget(project) {
    def excludes = ['utilities'] // this project does not have any tests
    if (excludes.contains(project.name)) {
        return false
    }
    if (project == project.rootProject) {
        return false
    }
    if (!project.plugins.hasPlugin('jacoco')) {
        return false
    }
    return true
}

task jacocoMerge(type: JacocoMerge) {
    gradle.afterProject { project, state ->
        if (!isJacocoReportTarget(project)) {
            return
        }
        executionData project.tasks.test.jacoco.destinationFile
        dependsOn project.tasks.test
    }
}

task jacocoMergedReport(type: JacocoReport, dependsOn: [jacocoMerge]) {
    executionData jacocoMerge.destinationFile
    gradle.afterProject { project, state ->
        if (!isJacocoReportTarget(project)) {
            return
        }
        sourceDirectories.from(files([project.sourceSets.main.allJava.srcDirs]))
        classDirectories.from(project.sourceSets.main.output)
    }
    reports {
        xml.enabled = true
        csv.enabled = true
    }
    doLast {
        def xml = reports.xml.destination
        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        def xmlReport = parser.parse(xml)
        def targetTypes = ['INSTRUCTION', 'BRANCH']
        def toRow = {
            def covered = it.@covered
            def missed = it.@missed
            def type = it.@type
            def total = (covered as int) + (missed as int)
            def percentage = ((covered as float) / (total as float) * 100)
            return "|" + type.toLowerCase().padRight(11) + "|" + missed.padLeft(3) + "/" + (total as String).padLeft(3) + "|" + String.format("%.2f", percentage) + "%|"
        }
        def summary = file(xml.parent + "/jacoco_summary.md")
        if (summary.exists()) {
            summary.delete()
        }
        summary << "|Type|Missed/Total|Coverage(%)|\n"
        summary << "|:---|---:|:---|\n"
        xmlReport.counter
                .stream()
                .filter {
                    targetTypes.contains(it.@type)
                }
                .forEach {
                    summary << toRow(it) + "\n"
                }
    }
}

jacocoMerge.finalizedBy jacocoMergedReport
